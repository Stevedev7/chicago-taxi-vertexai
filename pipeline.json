{
  "pipelineSpec": {
    "components": {
      "comp-feature-scale": {
        "executorLabel": "exec-feature-scale",
        "inputDefinitions": {
          "artifacts": {
            "X_test": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "X_train": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "Standard_scaler": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "X_test_feature_scaled": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "X_train_feature_scaled": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-get-data": {
        "executorLabel": "exec-get-data",
        "outputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-prepare-data": {
        "executorLabel": "exec-prepare-data",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "X": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "Y": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-preprocess": {
        "executorLabel": "exec-preprocess",
        "inputDefinitions": {
          "artifacts": {
            "X": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "Y": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "X_test": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "X_train": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "Y_test": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "Y_train": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "column_transformer": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-test": {
        "executorLabel": "exec-test",
        "inputDefinitions": {
          "artifacts": {
            "Model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            },
            "X_test_feature_scaled": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "Y_test": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-train": {
        "executorLabel": "exec-train",
        "inputDefinitions": {
          "artifacts": {
            "X_train_feature_scaled": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "Y_train": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "Model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-feature-scale": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "feature_scale"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'fsspec' 'gcsfs' 'sklearn' 'kfp==1.8.9' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef feature_scale(\n    X_train: Input[Artifact],\n    X_test: Input[Artifact],\n    X_train_feature_scaled: Output[Artifact],\n    X_test_feature_scaled: Output[Artifact],\n    Standard_scaler: Output[Artifact],\n):\n    import pickle\n    from pandas import read_csv, DataFrame\n    from json import dumps, dump\n    from sklearn.preprocessing import StandardScaler\n\n    x_train = read_csv(X_train.uri)\n    x_test = read_csv(X_test.uri)\n\n    standard_scaler = StandardScaler()\n    x_train = standard_scaler.fit_transform(x_train)\n    x_test = standard_scaler.transform(x_test)\n\n    DataFrame(x_train).to_csv(X_train_feature_scaled.uri, index=False)\n    DataFrame(x_test).to_csv(X_test_feature_scaled.uri, index=False)\n    # with open(X_train_feature_scaled.path, 'w') as f:\n    #     dump(dumps(x_train.tolist()), f)\n\n    # with open (X_test_feature_scaled.path, 'w') as f:\n    #     dump(dumps(x_test.tolist()), f)\n\n    print(X_test_feature_scaled.path)\n    print(X_test_feature_scaled.uri)\n\n    with open(Standard_scaler.path, 'wb') as f:\n        pickle.dump(standard_scaler, f)\n\n"
            ],
            "image": "python:3.8-slim"
          }
        },
        "exec-get-data": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "get_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'fsspec' 'gcsfs' 'kfp==1.8.9' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef get_data(\n    dataset: Output[Dataset]\n):\n    from pandas import read_csv\n\n    df = read_csv('gs://black-friday-demo-bucket/chicago-taxi-dataset/data.csv')\n\n    df.to_csv(dataset.uri, index=False)\n\n"
            ],
            "image": "python:3.8-slim"
          }
        },
        "exec-prepare-data": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "prepare_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'fsspec' 'gcsfs' 'kfp==1.8.9' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef prepare_data(\n    dataset: Input[Dataset],\n    X: Output[Artifact],\n    Y: Output[Artifact],\n):\n    import pandas as pd\n\n    df = pd.read_csv(dataset.uri)\n\n    df.drop(['unique_key', 'taxi_id', 'trip_start_timestamp', 'trip_end_timestamp', 'pickup_census_tract',\n           'dropoff_census_tract', 'pickup_community_area',\n           'dropoff_community_area', 'pickup_latitude',\n           'pickup_longitude', 'pickup_location', 'dropoff_latitude',\n           'dropoff_longitude', 'dropoff_location'], axis=1, inplace=True)\n\n    df.dropna(inplace=True, axis=0)\n\n    x = df.drop('trip_total', axis=1)\n    y = df.trip_total\n\n    x.to_csv(X.uri, index=False)\n    y.to_csv(Y.uri, index=False)\n\n"
            ],
            "image": "python:3.8-slim"
          }
        },
        "exec-preprocess": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "preprocess"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'fsspec' 'gcsfs' 'sklearn' 'kfp==1.8.9' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef preprocess(\n    X: Input[Artifact],\n    Y: Input[Artifact],\n    X_train: Output[Artifact],\n    Y_train: Output[Artifact],\n    X_test: Output[Artifact],\n    Y_test: Output[Artifact],\n    column_transformer: Output[Artifact],\n):\n    import pandas as pd\n    from pickle import dump\n    from sklearn.compose import ColumnTransformer\n    from sklearn.preprocessing import OneHotEncoder\n    from sklearn.model_selection import train_test_split\n\n    x = pd.read_csv(X.uri)\n    y = pd.read_csv(Y.uri)\n\n    ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [6, 7])], remainder='passthrough')\n    x = ct.fit_transform(x.values)\n\n\n    x_train, x_test, y_train, y_test = train_test_split(x, y.values, test_size=0.2)\n\n    pd.DataFrame(x_train.todense()).to_csv(X_train.uri, index=False)\n\n    pd.DataFrame(y_train).to_csv(Y_train.uri, index=False)\n\n    pd.DataFrame(x_test.todense()).to_csv(X_test.uri, index=False)\n\n    pd.DataFrame(y_test).to_csv(Y_test.uri, index=False)\n\n    with open(column_transformer.path, 'wb') as f:\n        dump(ct, f)\n\n"
            ],
            "image": "python:3.8-slim"
          }
        },
        "exec-test": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "test"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'fsspec' 'gcsfs' 'numpy' 'tensorflow' 'sklearn' 'kfp==1.8.9' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef test(\n    X_test_feature_scaled: Input[Artifact],\n    Y_test: Input[Artifact],\n    Model: Input[Model]\n):\n    from pickle import load\n    from numpy import array\n    from pandas import read_csv\n    from argparse import ArgumentParser\n    from json import load as json_load, loads as json_loads\n    from sklearn.metrics import mean_absolute_error\n\n\n    # with open(args.x_test, 'r') as f:\n    #     x_test = array(loads(json_load(f)))\n\n    # with open(args.x_test, 'r') as f:\n    #     x = array(json_loads(json_load(f)))\n\n    x_test = read_csv(X_test_feature_scaled.uri)\n    y_test = read_csv(Y_test.uri).values\n\n    with open(Model.path, 'rb') as f:\n        model = load(f)\n\n\n    y_pred = model.predict(x_test)\n\n    mse = mean_absolute_error(y_test, y_pred)\n\n    print(mse)\n\n"
            ],
            "image": "python:3.8-slim"
          }
        },
        "exec-train": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "train"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'fsspec' 'gcsfs' 'numpy' 'tensorflow' 'kfp==1.8.9' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef train(\n    X_train_feature_scaled: Input[Artifact],\n    Y_train: Input[Artifact],\n    Model: Output[Model]\n):\n    from numpy import array\n    from pickle import dump\n    from pandas import read_csv\n    from tensorflow.keras import layers\n    from tensorflow.keras import Sequential\n    from tensorflow.keras.optimizers import SGD\n    from tensorflow.keras.metrics import MeanAbsoluteError\n    from json import load, loads\n\n    # print(Y_train.uri, Y_train.path)\n    print(X_train_feature_scaled.uri)\n    # with open(X_train.path, 'r') as f:\n    #     x_train = array(loads(load(f)))\n    x_train = read_csv(X_train_feature_scaled.uri).values\n    y_train = read_csv(Y_train.uri).values\n\n    model = Sequential()\n\n    model.add(layers.Dense(10, activation='relu'))\n    model.add(layers.Dense(512, activation='relu'))\n    model.add(layers.Dense(1, activation='linear'))\n\n    model.compile(\n          loss='mse',\n          optimizer=SGD(learning_rate=0.001),\n          metrics=[MeanAbsoluteError()]\n    )\n\n    model.fit(x_train, y_train, batch_size=64, epochs=200)\n\n    with open (Model.path, 'wb') as f:\n        dump(model, f)\n\n"
            ],
            "image": "python:3.8-slim"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "chicago-taxi"
    },
    "root": {
      "dag": {
        "tasks": {
          "feature-scale": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-feature-scale"
            },
            "dependentTasks": [
              "preprocess"
            ],
            "inputs": {
              "artifacts": {
                "X_test": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "X_test",
                    "producerTask": "preprocess"
                  }
                },
                "X_train": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "X_train",
                    "producerTask": "preprocess"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "feature-scale"
            }
          },
          "get-data": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-get-data"
            },
            "taskInfo": {
              "name": "get-data"
            }
          },
          "prepare-data": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-prepare-data"
            },
            "dependentTasks": [
              "get-data"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset",
                    "producerTask": "get-data"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "prepare-data"
            }
          },
          "preprocess": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-preprocess"
            },
            "dependentTasks": [
              "prepare-data"
            ],
            "inputs": {
              "artifacts": {
                "X": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "X",
                    "producerTask": "prepare-data"
                  }
                },
                "Y": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "Y",
                    "producerTask": "prepare-data"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "preprocess"
            }
          },
          "test": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-test"
            },
            "dependentTasks": [
              "feature-scale",
              "preprocess",
              "train"
            ],
            "inputs": {
              "artifacts": {
                "Model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "Model",
                    "producerTask": "train"
                  }
                },
                "X_test_feature_scaled": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "X_test_feature_scaled",
                    "producerTask": "feature-scale"
                  }
                },
                "Y_test": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "Y_test",
                    "producerTask": "preprocess"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "test"
            }
          },
          "train": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-train"
            },
            "dependentTasks": [
              "feature-scale",
              "preprocess"
            ],
            "inputs": {
              "artifacts": {
                "X_train_feature_scaled": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "X_train_feature_scaled",
                    "producerTask": "feature-scale"
                  }
                },
                "Y_train": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "Y_train",
                    "producerTask": "preprocess"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "train"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.9"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://black-friday-demo-bucket/taxi-root/"
  }
}