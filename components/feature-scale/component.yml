name: Feature scale
inputs:
- {name: X_train, type: Artifact}
- {name: X_test, type: Artifact}
outputs:
- {name: X_train_feature_scaled, type: Artifact}
- {name: X_test_feature_scaled, type: Artifact}
- {name: Standard_scaler, type: Artifact}
implementation:
  container:
    image: python:3.8-slim
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'fsspec' 'gcsfs' 'sklearn' 'kfp==1.8.9' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def feature_scale(
          X_train: Input[Artifact],
          X_test: Input[Artifact],
          X_train_feature_scaled: Output[Artifact],
          X_test_feature_scaled: Output[Artifact],
          Standard_scaler: Output[Artifact],
      ):
          import pickle
          from pandas import read_csv, DataFrame
          from json import dumps, dump
          from sklearn.preprocessing import StandardScaler

          x_train = read_csv(X_train.uri)
          x_test = read_csv(X_test.uri)

          standard_scaler = StandardScaler()
          x_train = standard_scaler.fit_transform(x_train)
          x_test = standard_scaler.transform(x_test)

          DataFrame(x_train).to_csv(X_train_feature_scaled.uri, index=False)
          DataFrame(x_test).to_csv(X_test_feature_scaled.uri, index=False)
          # with open(X_train_feature_scaled.path, 'w') as f:
          #     dump(dumps(x_train.tolist()), f)

          # with open (X_test_feature_scaled.path, 'w') as f:
          #     dump(dumps(x_test.tolist()), f)

          print(X_test_feature_scaled.path)
          print(X_test_feature_scaled.uri)

          with open(Standard_scaler.path, 'wb') as f:
              pickle.dump(standard_scaler, f)

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - feature_scale
