name: Train
inputs:
- {name: X_train_feature_scaled, type: Artifact}
- {name: Y_train, type: Artifact}
outputs:
- {name: Model, type: Model}
implementation:
  container:
    image: python:3.8-slim
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'fsspec' 'gcsfs' 'numpy' 'tensorflow' 'kfp==1.8.9' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def train(
          X_train_feature_scaled: Input[Artifact],
          Y_train: Input[Artifact],
          Model: Output[Model]
      ):
          from numpy import array
          from pickle import dump
          from pandas import read_csv
          from tensorflow.keras import layers
          from tensorflow.keras import Sequential
          from tensorflow.keras.optimizers import SGD
          from tensorflow.keras.metrics import MeanAbsoluteError
          from json import load, loads

          # print(Y_train.uri, Y_train.path)
          print(X_train_feature_scaled.uri)
          # with open(X_train.path, 'r') as f:
          #     x_train = array(loads(load(f)))
          x_train = read_csv(X_train_feature_scaled.uri).values
          y_train = read_csv(Y_train.uri).values

          ann = Sequential()

          ann.add(layers.Dense(10, activation='relu'))
          ann.add(layers.Dense(512, activation='relu'))
          ann.add(layers.Dense(1, activation='linear'))

          ann.compile(
                loss='mse',
                optimizer=SGD(learning_rate=0.001),
                metrics=[MeanAbsoluteError()]
          )

          ann.fit(x_train, y_train, batch_size=64, epochs=200)

          ann.save(Model.uri.replace("Model", ""))

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - train
